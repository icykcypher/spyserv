// <auto-generated />
using System;
using DataService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataService.Migrations
{
    [DbContext(typeof(MonitoringUserServiceDbContext))]
    [Migration("20250511123814_ModifiedClientApp")]
    partial class ModifiedClientApp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataService.Model.MonitoringModel.ClientApp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeviceName");

                    b.HasIndex("UserId");

                    b.ToTable("ClientApps");
                });

            modelBuilder.Entity("DataService.Model.MonitoringModel.MonitoringData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientAppId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClientAppId");

                    b.ToTable("MonitoringData");
                });

            modelBuilder.Entity("DataService.Model.UsersModel.PermissionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PermissionEntity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Read"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Create"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Update"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Delete"
                        });
                });

            modelBuilder.Entity("DataService.Model.UsersModel.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("DataService.Model.UsersModel.RolePermissionEntity", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissionEntity");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 1
                        });
                });

            modelBuilder.Entity("DataService.Model.UsersModel.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataService.Model.UsersModel.UserRoleEntity", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoleEntity");
                });

            modelBuilder.Entity("DataService.Model.MonitoringModel.ClientApp", b =>
                {
                    b.HasOne("DataService.Model.UsersModel.User", "User")
                        .WithMany("ClientApps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataService.Model.MonitoringModel.MonitoringData", b =>
                {
                    b.HasOne("DataService.Model.MonitoringModel.ClientApp", "ClientApp")
                        .WithMany()
                        .HasForeignKey("ClientAppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DataService.Model.MonitoringModel.CpuResultDto", "CpuResult", b1 =>
                        {
                            b1.Property<Guid>("MonitoringDataId")
                                .HasColumnType("uuid");

                            b1.Property<double>("UsagePercent")
                                .HasColumnType("double precision");

                            b1.HasKey("MonitoringDataId");

                            b1.ToTable("MonitoringData");

                            b1.WithOwner()
                                .HasForeignKey("MonitoringDataId");
                        });

                    b.OwnsOne("DataService.Model.MonitoringModel.DiskResultDto", "DiskResult", b1 =>
                        {
                            b1.Property<Guid>("MonitoringDataId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Device")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<double>("ReadMbps")
                                .HasColumnType("double precision");

                            b1.Property<double>("WriteMbps")
                                .HasColumnType("double precision");

                            b1.HasKey("MonitoringDataId");

                            b1.ToTable("MonitoringData");

                            b1.WithOwner()
                                .HasForeignKey("MonitoringDataId");
                        });

                    b.OwnsOne("DataService.Model.MonitoringModel.MemoryResultDto", "MemoryResult", b1 =>
                        {
                            b1.Property<Guid>("MonitoringDataId")
                                .HasColumnType("uuid");

                            b1.Property<double>("TotalMemoryMb")
                                .HasColumnType("double precision");

                            b1.Property<double>("UsedPercent")
                                .HasColumnType("double precision");

                            b1.HasKey("MonitoringDataId");

                            b1.ToTable("MonitoringData");

                            b1.WithOwner()
                                .HasForeignKey("MonitoringDataId");
                        });

                    b.Navigation("ClientApp");

                    b.Navigation("CpuResult");

                    b.Navigation("DiskResult");

                    b.Navigation("MemoryResult");
                });

            modelBuilder.Entity("DataService.Model.UsersModel.RolePermissionEntity", b =>
                {
                    b.HasOne("DataService.Model.UsersModel.PermissionEntity", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataService.Model.UsersModel.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataService.Model.UsersModel.UserRoleEntity", b =>
                {
                    b.HasOne("DataService.Model.UsersModel.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataService.Model.UsersModel.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataService.Model.UsersModel.User", b =>
                {
                    b.Navigation("ClientApps");
                });
#pragma warning restore 612, 618
        }
    }
}
